# ******************************************************** #
# V2 of the AWS Lambda Deploy workflow adds caching the Docker image on AWS ECR so
# subsequent runs of the workflow doesn't require rebuilding the image from scratch.
# The Dockerfile is simple in this example, but a more production-grade Dockerfile
# with linux packages to install, a lengthier requirements.txt file, etc. will
# benenfit greatly from image caching.
# ******************************************************** #

name: AWS Lambda Docker Deploy

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:  # trigger manually

jobs:
  build:

    runs-on: ubuntu-latest
    env:
      ECR_IMAGE_TAG: latest
      AWS_DEFAULT_REGION: ap-east-1
      AWS_ECR_REPOSITORY_NAME: aws-lambda-fintech-ecr
      AWS_LAMBDA_FUNC_ONE_NAME: aws-fintech-us-news-scraper
      AWS_LAMBDA_FUNC_TWO_NAME: aws-fintech-hk-news-scraper

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_DEFAULT_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-deploy-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ env.AWS_ECR_REPOSITORY_NAME }}
      run: |
        docker build \
            --build-arg AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}" \
            --build-arg AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
            --build-arg AWS_DEFAULT_REGION="${{ env.AWS_DEFAULT_REGION }}" \
            --build-arg IEX_TOKEN="${{ secrets.IEX_TOKEN }}" \
            --build-arg DATABASE_HOST="${{ secrets.DATABASE_HOST }}" \
            --build-arg DATABASE_USER="${{ secrets.DATABASE_USER }}" \
            --build-arg DATABASE_PASSWORD="${{ secrets.DATABASE_PASSWORD }}" \
            --build-arg MONGO_URL="${{ secrets.MONGO_URL }}" \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.ECR_IMAGE_TAG }} .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.ECR_IMAGE_TAG }}
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:${{ env.ECR_IMAGE_TAG }}"

    - name: Deploy to AWS Lambda function one
      run: |
        aws lambda update-function-code \
        --function-name ${{ env.AWS_LAMBDA_FUNC_ONE_NAME }} \
        --image-uri "${{ secrets.AWS_ECR_IMAGE_URI }}:${{ env.ECR_IMAGE_TAG }}"
      env:
        AWS_LAMBDA_FUNC_NAME: aws-lambda-demo-lambda
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ${{ env.AWS_DEFAULT_REGION }}

    - name: Deploy to AWS Lambda function two
      run: |
        aws lambda update-function-code \
        --function-name ${{ env.AWS_LAMBDA_FUNC_TWO_NAME }} \
        --image-uri "${{ secrets.AWS_ECR_IMAGE_URI }}:${{ env.ECR_IMAGE_TAG }}"
      env:
        AWS_LAMBDA_FUNC_NAME: aws-lambda-demo-lambda
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ${{ env.AWS_DEFAULT_REGION }}